/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types: enable
#extension GL_EXT_buffer_reference2 : require

#include "device_host.h"
#include "dh_bindings.h"
#include "payload.glsl"
#include "nvvkhl/shaders/random.glsl"
#include "nvvkhl/shaders/dh_scn_desc.h"


// clang-format off
layout(location = 0) rayPayloadInEXT HitPayload payload;

layout(buffer_reference, scalar) readonly buffer GltfMaterialBuf    { GltfShadeMaterial m[]; };
layout(buffer_reference, scalar) readonly buffer VertexBuf          { Vertex v[]; };
layout(buffer_reference, scalar) readonly buffer IndicesBuf         { uvec3 i[]; };
layout(buffer_reference, scalar) readonly buffer PrimMeshInfoBuf    { PrimMeshInfo i[]; };
layout(buffer_reference, scalar) readonly buffer InstanceInfoBuf    { InstanceInfo i[]; };


layout(set = 1, binding = eFrameInfo, scalar) uniform FrameInfo_ { FrameInfo frameInfo; };
layout(set = 1, binding = eSceneDesc, scalar) readonly buffer SceneDesc_ { SceneDescription sceneDesc; };
layout(set = 1, binding = eTextures)          uniform sampler2D texturesMap[]; // all textures

layout(push_constant) uniform RtxPushConstant_ { PushConstant pc; };

  // clang-format on


hitAttributeEXT vec2 attribs;


//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
vec2 GetHitState(PrimMeshInfo pinfo)
{

  // Vextex and indices of the primitive
  VertexBuf  vertices = VertexBuf(pinfo.vertexAddress);
  IndicesBuf indices  = IndicesBuf(pinfo.indexAddress);

  // Barycentric coordinate on the triangle
  const vec3 barycentrics = vec3(1.0 - attribs.x - attribs.y, attribs.x, attribs.y);

  // Getting the 3 indices of the triangle (local)
  uvec3 triangleIndex = indices.i[gl_PrimitiveID];

  // All vertex attributes of the triangle.
  Vertex v0 = vertices.v[triangleIndex.x];
  Vertex v1 = vertices.v[triangleIndex.y];
  Vertex v2 = vertices.v[triangleIndex.z];


  // TexCoord
  const vec2 uv0 = vec2(v0.position.w, v0.normal.w);
  const vec2 uv1 = vec2(v1.position.w, v1.normal.w);
  const vec2 uv2 = vec2(v2.position.w, v2.normal.w);
  vec2       uv  = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

  return uv;
}

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
void main()
{
  // Retrieve the Primitive mesh buffer information
  PrimMeshInfo  primMeshInfo = PrimMeshInfoBuf(sceneDesc.primInfoAddress).i[gl_InstanceCustomIndexEXT];

  // Scene materials
  uint              matIndex  = max(0, primMeshInfo.materialIndex);  // material of primitive mesh
  GltfShadeMaterial mat       = GltfMaterialBuf(sceneDesc.materialAddress).m[matIndex];

  float baseColorAlpha = mat.pbrBaseColorFactor.a;
  if(mat.pbrBaseColorTexture > -1)
  {
    vec2 uv = GetHitState(primMeshInfo);

    baseColorAlpha *= texture(texturesMap[nonuniformEXT(mat.pbrBaseColorTexture)], uv).a;
  }

  float opacity;
  if(mat.alphaMode == ALPHA_MASK)
  {
    opacity = baseColorAlpha > mat.alphaCutoff ? 1.0 : 0.0;
  }
  else
  {
    opacity = baseColorAlpha;
  }

  // Do alpha blending the stochastically way
  if(rand(payload.seed) > opacity)
    ignoreIntersectionEXT;
}
